<Window x:Class="WindWakerTextEditor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:WindWakerTextEditor"
        xmlns:view="clr-namespace:WindWakerTextEditor.View"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Title="{Binding WindowTitle}" Height="623.1" Width="874" Background="#FFEEEEEE">
    <Window.DataContext>
        <view:ViewModel/>
    </Window.DataContext>
    <Window.Resources>
        <view:NullToFalseConverter x:Key="NullToFalseConverter"/>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="44*"/>
            <ColumnDefinition Width="10"/>
            <ColumnDefinition Width="63*"/>
        </Grid.ColumnDefinitions>
        <DockPanel VerticalAlignment="Top" Height="20" Grid.ColumnSpan="3">
            <Menu DockPanel.Dock="Top">
                <MenuItem Header="_File">
                    <MenuItem Header="_Open" Command="{Binding OnRequestOpenFile}"/>
                    <MenuItem Header="_Save" Command="{Binding OnRequestSaveFile}"/>
                    <MenuItem Header="Save _As..." Command="{Binding OnRequestSaveFileAs}"/>
                    <Separator/>
                    <MenuItem Header="Close" Command="{Binding OnRequestCloseCurrentFile}"/>
                </MenuItem>
                <MenuItem Header="_Edit">
                    <MenuItem Header="Add Message" Command="{Binding OnRequestAddMessage}"/>
                    <MenuItem Header="Delete Selected Message" Command="{Binding OnRequestRemoveMessage}"/>
                </MenuItem>
                <MenuItem Header="_Tools">
                    <MenuItem Header="Color Editor" Command="{Binding OnRequestOpenColorEditor}"/>
                </MenuItem>
                <MenuItem Header="_Options">
                    <MenuItem Header="Compress on Save" IsCheckable="True" IsChecked="{Binding IsCompressed}"/>
                </MenuItem>
                <MenuItem Header="_Help">
                    <MenuItem Header="_About" Command="{Binding OnRequestAboutInfo}"/>
                    <MenuItem Header="_Wiki" Command="{Binding OnRequestOpenWebPage}" CommandParameter="https://github.com/Sage-of-Mirrors/WPFTextEditor/wiki"/>
                    <MenuItem Header="_Report a Bug" Command="{Binding OnRequestOpenWebPage}" CommandParameter="https://github.com/Sage-of-Mirrors/WPFTextEditor/issues"/>
                </MenuItem>
            </Menu>
        </DockPanel>
        <DockPanel LastChildFill="true" Margin="0,20,0,10">
            <Grid>
                <xctk:WatermarkTextBox x:Name="SearchTextBox" Watermark="Type to search..." Margin="10,10,0,0" TextWrapping="Wrap" Text="{Binding SearchFilter, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsDataLoaded}" Height="24" VerticalAlignment="Top"/>
                <ListView x:Name="TextListView" Grid.Column="0" Margin="10,39,0,0" ItemsSource="{Binding ColViewSource.View, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding SelectedMessage, UpdateSourceTrigger=PropertyChanged}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" HorizontalContentAlignment="Stretch" UseLayoutRounding="True" ScrollViewer.CanContentScroll="True">
                    <ListView.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Add message" Command="{Binding OnRequestAddMessage}"/>
                            <MenuItem Header="Delete message" Command="{Binding OnRequestRemoveMessage}"/>
                        </ContextMenu>
                    </ListView.ContextMenu>
                    <ListView.View>
                        <GridView AllowsColumnReorder="False">
                            <GridViewColumn Header="Index" Width="45" DisplayMemberBinding="{Binding Index}"/>
                            <GridViewColumn Header="Msg. ID" Width="45" DisplayMemberBinding="{Binding MessageId}"/>
                            <GridViewColumn Header="Text Data" DisplayMemberBinding="{Binding TextData, UpdateSourceTrigger=PropertyChanged}" Width="Auto"/>
                        </GridView>
                    </ListView.View>
                </ListView>
            </Grid>
        </DockPanel>
        <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Margin="1,0"/>
        <DockPanel LastChildFill="True" Margin="0,395,10,10" Grid.Column="2">
            <Grid>
                <TextBox IsEnabled="{Binding SelectedMessage, Converter={StaticResource NullToFalseConverter}}" TextWrapping="Wrap" AcceptsReturn="True" Text="{Binding SelectedMessage.TextData, UpdateSourceTrigger=PropertyChanged}" SelectionChanged="TextBox_SelectionChanged" ScrollViewer.CanContentScroll="True" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" Margin="2,0,0,0" BorderThickness="2" LostFocus="TextBox_LostFocus">
                    <TextBox.ContextMenu>
                        <ContextMenu>
                            <MenuItem Command="ApplicationCommands.Cut"/>
                            <MenuItem Command="ApplicationCommands.Copy"/>
                            <MenuItem Command="ApplicationCommands.Paste"/>
                            <MenuItem Header="Control codes...">
                                <MenuItem Header="Player Name" Command="{Binding InsertCommand}" CommandParameter="player"/>
                                <MenuItem Header="Color" Command="{Binding InsertCommand}" CommandParameter="color:0"/>
                                <MenuItem Header="Scale" Command="{Binding InsertCommand}" CommandParameter="scale:100"/>
                                <Separator/>
                                <MenuItem Header="Draw by Character" Command="{Binding InsertCommand}" CommandParameter="draw:char"/>
                                <MenuItem Header="Draw Instantly" Command="{Binding InsertCommand}" CommandParameter="draw:instant"/>
                                <Separator/>
                                <MenuItem Header="Wait" Command="{Binding InsertCommand}" CommandParameter="wait:10"/>
                                <MenuItem Header="Wait and Dismiss" Command="{Binding InsertCommand}" CommandParameter="wait+dismiss:10"/>
                                <MenuItem Header="Wait and Dismiss with Prompt" Command="{Binding InsertCommand}" CommandParameter="wait+dismiss (prompt):10"/>
                                <Separator/>
                                <MenuItem Header="Furigana" Command="{Binding InsertCommand}" CommandParameter="furigana:1,あ"/>
                            </MenuItem>
                            <MenuItem Header="Icons...">
                                <MenuItem Header="A Button" Command="{Binding InsertCommand}" CommandParameter="icon:A button"/>
                                <MenuItem Header="Flashing A Button" Command="{Binding InsertCommand}" CommandParameter="icon:starburst A button"/>
                                <MenuItem Header="B Button" Command="{Binding InsertCommand}" CommandParameter="icon:B button"/>
                                <MenuItem Header="X Button" Command="{Binding InsertCommand}" CommandParameter="icon:X button"/>
                                <MenuItem Header="Y Button" Command="{Binding InsertCommand}" CommandParameter="icon:Y button"/>
                                <MenuItem Header="Z Button" Command="{Binding InsertCommand}" CommandParameter="icon:Z button"/>
                                <MenuItem Header="Left Trigger" Command="{Binding InsertCommand}" CommandParameter="icon:L trigger"/>
                                <MenuItem Header="Right Trigger" Command="{Binding InsertCommand}" CommandParameter="icon:R trigger"/>
                                <MenuItem Header="C Stick" Command="{Binding InsertCommand}" CommandParameter="icon:C stick"/>
                                <Separator/>
                                <MenuItem Header="Control stick...">
                                    <MenuItem Header="All Directions" Command="{Binding InsertCommand}" CommandParameter="icon:Control stick (all directions)"/>
                                    <MenuItem Header="Moving Up" Command="{Binding InsertCommand}" CommandParameter="icon:Control stick (moving up)"/>
                                    <MenuItem Header="Moving Down" Command="{Binding InsertCommand}" CommandParameter="icon:Control stick (moving down)"/>
                                    <MenuItem Header="Moving Left" Command="{Binding InsertCommand}" CommandParameter="icon:Control stick (moving left)"/>
                                    <MenuItem Header="Moving Right" Command="{Binding InsertCommand}" CommandParameter="icon:Control stick (moving right)"/>
                                    <MenuItem Header="Moving Up and Down" Command="{Binding InsertCommand}" CommandParameter="icon:Control stick (moving up+down)"/>
                                    <MenuItem Header="Moving Left and Right" Command="{Binding InsertCommand}" CommandParameter="icon:Control stick (moving left+right)"/>
                                </MenuItem>
                                <Separator/>
                                <MenuItem Header="Left Arrow" Command="{Binding InsertCommand}" CommandParameter="icon:Left arrow"/>
                                <MenuItem Header="Right Arrow" Command="{Binding InsertCommand}" CommandParameter="icon:Right arrow"/>
                                <MenuItem Header="Up Arrow" Command="{Binding InsertCommand}" CommandParameter="icon:Up arrow"/>
                                <MenuItem Header="Down Arrow" Command="{Binding InsertCommand}" CommandParameter="icon:Down arrow"/>
                                <Separator/>
                                <MenuItem Header="Heart" Command="{Binding InsertCommand}" CommandParameter="icon:heart"/>
                                <MenuItem Header="Music Note" Command="{Binding InsertCommand}" CommandParameter="icon:music note"/>
                                <MenuItem Header="Target" Command="{Binding InsertCommand}" CommandParameter="icon:target starburst"/>
                            </MenuItem>
                        </ContextMenu>
                    </TextBox.ContextMenu>
                </TextBox>
            </Grid>
        </DockPanel>
        <DockPanel LastChildFill="True" Margin="2,20,10,0" Height="360" VerticalAlignment="Top" Grid.Column="2">
            <Grid>
                <GroupBox Header="Textbox Options" Margin="0,0,0,212">
                    <Grid Margin="0,0,-2,-6">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <ComboBox x:Name="BoxTypeCombo" Grid.Column="0" Grid.Row="0" IsEnabled="{Binding SelectedMessage, Converter={StaticResource NullToFalseConverter}}" Margin="117,10,10,0" VerticalAlignment="Top" SelectedItem="{Binding SelectedMessage.TextBoxType}" Height="25"/>
                        <ComboBox x:Name="DrawTypeBox" Grid.Column="0" Grid.Row="1" IsEnabled="{Binding SelectedMessage, Converter={StaticResource NullToFalseConverter}}" Margin="117,10,10,0" VerticalAlignment="Top" SelectedItem="{Binding SelectedMessage.InitialDrawType}" Height="24"/>
                        <Label Content="Box Type:" ToolTip="The type of textbox that the message will appear in." Grid.Column="0" Grid.Row="0" Margin="10,10,0,0" VerticalAlignment="Top" Height="25" HorizontalAlignment="Left" Width="60"/>
                        <Label Content="Initial Draw Type:" ToolTip="The draw type (by char or instant) that the message will begin drawing with." Grid.Column="0" Grid.Row="1" Margin="10,10,0,0" VerticalAlignment="Top" Height="29" HorizontalAlignment="Left" Width="101"/>
                        <Label Content="Box Position:" ToolTip="The position of the textbox on the screen." Grid.Column="1" Grid.Row="0" Margin="10,10,0,0" VerticalAlignment="Top" Height="25" HorizontalAlignment="Left" Width="78"/>
                        <ComboBox x:Name="BoxPositionCombo" Grid.Row="0" IsEnabled="{Binding SelectedMessage, Converter={StaticResource NullToFalseConverter}}" Margin="99,10,10,0" VerticalAlignment="Top" SelectedItem="{Binding SelectedMessage.TextBoxPosition}" Height="25" Grid.Column="1"/>
                        <Label Grid.Column="1" Grid.Row="1" Content="Lines per Box:" ToolTip="The number of lines the textbox shows before the text must scroll to another textbox." Margin="10,10,0,0" VerticalAlignment="Top" Height="29" HorizontalAlignment="Left" Width="84"/>
                        <TextBox Grid.Column="1" Grid.Row="1" IsEnabled="{Binding SelectedMessage, Converter={StaticResource NullToFalseConverter}}" Height="25" Margin="99,9,10,0" TextWrapping="Wrap" Text="{Binding SelectedMessage.NumLinesPerBox}" VerticalAlignment="Top"/>
                        <Label Content="Item ID:" ToolTip="If Box Type is Item_Get, this is the item image to be displayed on the left side of the textbox." Grid.Column="0" Grid.Row="2" Margin="10,10,0,0" VerticalAlignment="Top" Height="25" HorizontalAlignment="Left" Width="51"/>
                        <ComboBox Grid.Column="0" Grid.Row="2" IsEnabled="{Binding SelectedMessage, Converter={StaticResource NullToFalseConverter}}" x:Name="ItemIDBox" Margin="117,10,10,0" VerticalAlignment="Top" SelectedItem="{Binding SelectedMessage.DisplayItemId}" Height="25"/>
                    </Grid>
                </GroupBox>
                <GroupBox Header="Misc." Margin="0,153,0,17">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Label Content="Unknown1:" Grid.Column="0" Grid.Row="0" Margin="10,10,0,0" VerticalAlignment="Top" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" Width="70"/>
                        <TextBox Grid.Column="0" Grid.Row="0" IsEnabled="False" Height="22" Margin="103,10,10,0" TextWrapping="Wrap" Text="{Binding SelectedMessage.UnknownBool1}" VerticalAlignment="Top"/>
                        <Label Content="Initial Sound:" ToolTip="The sound to play when the textbox opens. A value of 0 indicates no sound." Grid.Column="1" Grid.Row="0" Margin="10,10,0,6" HorizontalAlignment="Left" Width="79"/>
                        <TextBox Grid.Column="1" IsEnabled="{Binding SelectedMessage, Converter={StaticResource NullToFalseConverter}}" Margin="114,10,10,10" TextWrapping="Wrap" Text="{Binding SelectedMessage.InitialSound}"/>
                        <Label Content="Initial Camera:" ToolTip="The camera behavior to use when the textbox opens. A value of 0 indicates no movement." Grid.Column="1" Grid.Row="1" Margin="10,10,0,0" VerticalAlignment="Top" Height="26" HorizontalAlignment="Left" Width="85"/>
                        <TextBox Grid.Column="1" Grid.Row="1" IsEnabled="{Binding SelectedMessage, Converter={StaticResource NullToFalseConverter}}" Height="22" Margin="114,10,10,0" TextWrapping="Wrap" VerticalAlignment="Top" Text="{Binding SelectedMessage.InitialCameraBehavior}"/>
                        <Label Grid.Column="1" Grid.Row="2" ToolTip="The animation for the speaker to perform when the textbox opens. A value of 0 indicates no animation." Content="Initial Animation:" Margin="10,10,0,0" VerticalAlignment="Top" Height="32" HorizontalAlignment="Left" Width="99"/>
                        <TextBox Grid.Column="1" Grid.Row="2" IsEnabled="{Binding SelectedMessage, Converter={StaticResource NullToFalseConverter}}" Height="22" Margin="114,10,10,0" TextWrapping="Wrap" VerticalAlignment="Top" Text="{Binding SelectedMessage.InitialSpeakerAnim}"/>
                        <Label Grid.Column="0" Grid.Row="1" ToolTip="If the message is for buying an item, this value indicates how many Rupees will be deducted from Link's wallet." Content="Item Price:" Margin="10,10,0,0" VerticalAlignment="Top" Height="26" HorizontalAlignment="Left" Width="70"/>
                        <TextBox Grid.Column="0" Grid.Row="1" IsEnabled="{Binding SelectedMessage, Converter={StaticResource NullToFalseConverter}}" x:Name="ItemPriceBox" Height="22" Margin="103,10,10,0" TextWrapping="Wrap" Text="{Binding SelectedMessage.ItemPrice}" VerticalAlignment="Top"/>
                        <Label Grid.Column="0" Grid.Row="2" Content="Unknown3:" Margin="10,10,0,0" VerticalAlignment="Top" Height="32" HorizontalAlignment="Left" Width="70"/>
                        <TextBox Grid.Column="0" Grid.Row="2" IsEnabled="False" x:Name="NextMessageBox" Height="22" Margin="103,10,10,0" TextWrapping="Wrap" Text="{Binding SelectedMessage.NextMessageID}" VerticalAlignment="Top"/>
                        <Label Grid.Column="0" Grid.Row="3" Content="Unknown4:" Margin="10,10,0,0" VerticalAlignment="Top" Height="32" HorizontalAlignment="Left" Width="70"/>
                        <TextBox Grid.Column="0" Grid.Row="3" IsEnabled="False" Height="22" Margin="103,10,10,0" TextWrapping="Wrap" Text="{Binding SelectedMessage.UnknownField3}" VerticalAlignment="Top"/>
                    </Grid>
                </GroupBox>
            </Grid>
        </DockPanel>
        <Label Content="{Binding ErrorLabelContent}" Visibility="{Binding ErrorLabelVisible}" Grid.Column="2"  Margin="0,362,10,188" Foreground="Red"/>
    </Grid>
</Window>
